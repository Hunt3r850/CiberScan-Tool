#!/usr/bin/env python3
"""
Script de validación para el módulo de análisis de vulnerabilidades.

Este script realiza pruebas unitarias para verificar el correcto
funcionamiento del módulo de análisis de vulnerabilidades.
"""

import os
import sys
import unittest
import tempfile
import json
from unittest.mock import patch, MagicMock

# Añadir el directorio raíz al path para importar los módulos
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from modules.vulnerability_scanner import Vulnerability, CVEDatabase, VulnerabilityScanner, VulnerabilityReporter

class TestVulnerability(unittest.TestCase):
    """Pruebas unitarias para la clase Vulnerability."""
    
    def test_vulnerability_creation(self):
        """Prueba la creación de un objeto Vulnerability."""
        vuln = Vulnerability("CVE-2021-1234", "Test Vulnerability", "This is a test", 7.5)
        
        self.assertEqual(vuln.vuln_id, "CVE-2021-1234")
        self.assertEqual(vuln.name, "Test Vulnerability")
        self.assertEqual(vuln.description, "This is a test")
        self.assertEqual(vuln.cvss_score, 7.5)
        self.assertEqual(vuln.severity, "High")
        
    def test_severity_calculation(self):
        """Prueba el cálculo de severidad basado en CVSS."""
        test_cases = [
            (9.5, "Critical"),
            (8.0, "High"),
            (5.0, "Medium"),
            (3.0, "Low"),
            (0.0, "None"),
            (None, "Unknown")
        ]
        
        for cvss, expected_severity in test_cases:
            vuln = Vulnerability("CVE-TEST", "Test", cvss_score=cvss)
            self.assertEqual(vuln.severity, expected_severity)
            
    def test_add_affected_system(self):
        """Prueba la adición de sistemas afectados."""
        vuln = Vulnerability("CVE-2021-1234", "Test Vulnerability")
        
        system = {
            'ip_address': '192.168.1.1',
            'hostname': 'test-host',
            'port': 80,
            'service': 'http'
        }
        
        vuln.add_affected_system(system)
        self.assertEqual(len(vuln.affected_systems), 1)
        self.assertEqual(vuln.affected_systems[0], system)
        
    def test_to_dict(self):
        """Prueba la conversión a diccionario."""
        vuln = Vulnerability("CVE-2021-1234", "Test Vulnerability", "This is a test", 7.5)
        vuln.add_reference("https://example.com")
        vuln.set_mitigation("Update to latest version")
        
        vuln_dict = vuln.to_dict()
        
        self.assertEqual(vuln_dict['vuln_id'], "CVE-2021-1234")
        self.assertEqual(vuln_dict['name'], "Test Vulnerability")
        self.assertEqual(vuln_dict['description'], "This is a test")
        self.assertEqual(vuln_dict['cvss_score'], 7.5)
        self.assertEqual(vuln_dict['severity'], "High")
        self.assertEqual(vuln_dict['references'], ["https://example.com"])
        self.assertEqual(vuln_dict['mitigation'], "Update to latest version")

class TestCVEDatabase(unittest.TestCase):
    """Pruebas unitarias para la clase CVEDatabase."""
    
    def setUp(self):
        """Configuración inicial para las pruebas."""
        # Usar una base de datos temporal para las pruebas
        self.temp_db_fd, self.temp_db_path = tempfile.mkstemp(suffix='.db')
        self.cve_db = CVEDatabase(db_path=self.temp_db_path, log_level=30)  # WARNING level
        
    def tearDown(self):
        """Limpieza después de las pruebas."""
        os.close(self.temp_db_fd)
        os.unlink(self.temp_db_path)
        
    def test_add_vulnerability(self):
        """Prueba la adición de vulnerabilidades a la base de datos."""
        vuln = Vulnerability("CVE-2021-1234", "Test Vulnerability", "This is a test", 7.5)
        vuln.add_reference("https://example.com")
        
        result = self.cve_db.add_vulnerability(vuln)
        self.assertTrue(result)
        
        # Verificar que se puede recuperar
        retrieved_vuln = self.cve_db.search_by_id("CVE-2021-1234")
        self.assertIsNotNone(retrieved_vuln)
        self.assertEqual(retrieved_vuln.vuln_id, "CVE-2021-1234")
        
    def test_search_by_keyword(self):
        """Prueba la búsqueda por palabra clave."""
        # Añadir algunas vulnerabilidades
        vuln1 = Vulnerability("CVE-2021-1234", "Apache Vulnerability", "This affects Apache", 7.5)
        vuln2 = Vulnerability("CVE-2021-5678", "MySQL Vulnerability", "This affects MySQL", 6.5)
        
        self.cve_db.add_vulnerability(vuln1)
        self.cve_db.add_vulnerability(vuln2)
        
        # Buscar por palabra clave
        results = self.cve_db.search_by_keyword("Apache")
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].vuln_id, "CVE-2021-1234")
        
    def test_search_by_product(self):
        """Prueba la búsqueda por producto."""
        # Añadir algunas vulnerabilidades
        vuln1 = Vulnerability("CVE-2021-1234", "Apache 2.4.1 Vulnerability", "This affects Apache 2.4.1", 7.5)
        vuln2 = Vulnerability("CVE-2021-5678", "MySQL 5.7 Vulnerability", "This affects MySQL 5.7", 6.5)
        
        self.cve_db.add_vulnerability(vuln1)
        self.cve_db.add_vulnerability(vuln2)
        
        # Buscar por producto
        results = self.cve_db.search_by_product("MySQL", "5.7")
        self.assertEqual(len(results), 1)
        self.assertEqual(results[0].vuln_id, "CVE-2021-5678")
        
    def test_export_import_json(self):
        """Prueba la exportación e importación de JSON."""
        # Añadir algunas vulnerabilidades
        vuln1 = Vulnerability("CVE-2021-1234", "Test Vulnerability 1", "This is test 1", 7.5)
        vuln2 = Vulnerability("CVE-2021-5678", "Test Vulnerability 2", "This is test 2", 6.5)
        
        self.cve_db.add_vulnerability(vuln1)
        self.cve_db.add_vulnerability(vuln2)
        
        # Exportar a JSON
        temp_json_fd, temp_json_path = tempfile.mkstemp(suffix='.json')
        os.close(temp_json_fd)
        
        export_result = self.cve_db.export_to_json(temp_json_path)
        self.assertTrue(export_result)
        
        # Crear una nueva base de datos
        new_db_fd, new_db_path = tempfile.mkstemp(suffix='.db')
        os.close(new_db_fd)
        new_cve_db = CVEDatabase(db_path=new_db_path, log_level=30)
        
        # Importar desde JSON
        import_count = new_cve_db.import_from_json(temp_json_path)
        self.assertEqual(import_count, 2)
        
        # Verificar que se importaron correctamente
        vuln = new_cve_db.search_by_id("CVE-2021-1234")
        self.assertIsNotNone(vuln)
        self.assertEqual(vuln.name, "Test Vulnerability 1")
        
        # Limpiar
        os.unlink(temp_json_path)
        os.unlink(new_db_path)

class TestVulnerabilityScanner(unittest.TestCase):
    """Pruebas unitarias para la clase VulnerabilityScanner."""
    
    def setUp(self):
        """Configuración inicial para las pruebas."""
        # Crear un mock de CVEDatabase
        self.mock_cve_db = MagicMock()
        self.scanner = VulnerabilityScanner(self.mock_cve_db, log_level=30)  # WARNING level
        
    def test_set_api_key(self):
        """Prueba la configuración de claves API."""
        self.scanner.set_api_key('vulners', 'test-api-key')
        self.assertEqual(self.scanner.api_keys['vulners'], 'test-api-key')
        
    @patch('requests.post')
    def test_scan_host_with_vulners(self, mock_post):
        """Prueba el escaneo con Vulners API."""
        # Configurar el mock
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'result': 'OK',
            'data': {
                'search': [
                    {
                        'id': 'CVE-2021-1234',
                        'title': 'Test Vulnerability',
                        'description': 'This is a test',
                        'cvss': {'score': 7.5},
                        'href': 'https://example.com',
                        'solution': 'Update to latest version'
                    }
                ]
            }
        }
        mock_post.return_value = mock_response
        
        # Configurar API key
        self.scanner.set_api_key('vulners', 'test-api-key')
        
        # Crear host de prueba
        from modules.network_scanner import Host, Port, Service
        host = Host('192.168.1.1', 'test-host', 'up')
        port = Port(80, 'tcp', 'open')
        service = Service('http', 'Apache', '2.4.41')
        port.set_service(service)
        host.add_port(port)
        
        # Realizar escaneo
        vulnerabilities = self.scanner.scan_host_with_vulners(host)
        
        # Verificar resultados
        self.assertEqual(len(vulnerabilities), 1)
        self.assertEqual(vulnerabilities[0].vuln_id, 'CVE-2021-1234')
        self.assertEqual(vulnerabilities[0].name, 'Test Vulnerability')
        self.assertEqual(vulnerabilities[0].cvss_score, 7.5)
        
    def test_scan_host_with_cve_db(self):
        """Prueba el escaneo con la base de datos CVE local."""
        # Configurar el mock de CVEDatabase
        mock_vuln = Vulnerability("CVE-2021-1234", "Test Vulnerability", "This is a test", 7.5)
        self.mock_cve_db.search_by_product.return_value = [mock_vuln]
        
        # Crear host de prueba
        from modules.network_scanner import Host, Port, Service
        host = Host('192.168.1.1', 'test-host', 'up')
        port = Port(80, 'tcp', 'open')
        service = Service('http', 'Apache', '2.4.41')
        port.set_service(service)
        host.add_port(port)
        
        # Realizar escaneo
        vulnerabilities = self.scanner.scan_host_with_cve_db(host)
        
        # Verificar resultados
        self.assertEqual(len(vulnerabilities), 1)
        self.assertEqual(vulnerabilities[0].vuln_id, 'CVE-2021-1234')
        
        # Verificar que se llamó a search_by_product con los parámetros correctos
        self.mock_cve_db.search_by_product.assert_called_with('Apache', '2.4.41')
        
    def test_save_load_results(self):
        """Prueba guardar y cargar resultados."""
        # Crear vulnerabilidades de prueba
        vuln1 = Vulnerability("CVE-2021-1234", "Test Vulnerability 1", "This is test 1", 7.5)
        vuln2 = Vulnerability("CVE-2021-5678", "Test Vulnerability 2", "This is test 2", 6.5)
        
        # Crear resultados de prueba
        results = {
            '192.168.1.1': [vuln1],
            '192.168.1.2': [vuln2]
        }
        
        # Guardar resultados
        temp_fd, temp_path = tempfile.mkstemp(suffix='.json')
        os.close(temp_fd)
        
        save_result = self.scanner.save_results(results, temp_path)
        self.assertTrue(save_result)
        
        # Cargar resultados
        loaded_results = self.scanner.load_results(temp_path)
        
        # Verificar resultados
        self.assertEqual(len(loaded_results), 2)
        self.assertEqual(len(loaded_results['192.168.1.1']), 1)
        self.assertEqual(loaded_results['192.168.1.1'][0].vuln_id, "CVE-2021-1234")
        
        # Limpiar
        os.unlink(temp_path)

class TestVulnerabilityReporter(unittest.TestCase):
    """Pruebas unitarias para la clase VulnerabilityReporter."""
    
    def setUp(self):
        """Configuración inicial para las pruebas."""
        self.temp_dir = tempfile.mkdtemp()
        self.reporter = VulnerabilityReporter(output_dir=self.temp_dir, log_level=30)  # WARNING level
        
        # Crear vulnerabilidades de prueba
        self.vuln1 = Vulnerability("CVE-2021-1234", "Test Vulnerability 1", "This is test 1", 9.5)
        self.vuln1.add_reference("https://example.com/1")
        self.vuln1.set_mitigation("Update to latest version")
        
        self.vuln2 = Vulnerability("CVE-2021-5678", "Test Vulnerability 2", "This is test 2", 6.5)
        self.vuln2.add_reference("https://example.com/2")
        
        # Crear resultados de prueba
        self.results = {
            '192.168.1.1': [self.vuln1],
            '192.168.1.2': [self.vuln2]
        }
        
    def tearDown(self):
        """Limpieza después de las pruebas."""
        import shutil
        shutil.rmtree(self.temp_dir)
        
    def test_generate_text_report(self):
        """Prueba la generación de informes de texto."""
        report_file = self.reporter.generate_text_report(self.results)
        
        # Verificar que se creó el archivo
        self.assertTrue(os.path.exists(report_file))
        
        # Verificar contenido básico
        with open(report_file, 'r') as f:
            content = f.read()
            self.assertIn("INFORME DE ANÁLISIS DE VULNERABILIDADES", content)
            self.assertIn("CVE-2021-1234", content)
            self.assertIn("CVE-2021-5678", content)
            
    def test_generate_json_report(self):
        """Prueba la generación de informes JSON."""
        report_file = self.reporter.generate_json_report(self.results)
        
        # Verificar que se creó el archivo
        self.assertTrue(os.path.exists(report_file))
        
        # Verificar contenido básico
        with open(report_file, 'r') as f:
            data = json.load(f)
            self.assertIn("metadata", data)
            self.assertIn("hosts", data)
            self.assertIn("192.168.1.1", data["hosts"])
            self.assertEqual(data["hosts"]["192.168.1.1"]["vulnerabilities"][0]["vuln_id"], "CVE-2021-1234")
            
    def test_generate_complete_report(self):
        """Prueba la generación de informes completos."""
        report_files = self.reporter.generate_complete_report(self.results)
        
        # Verificar que se crearon los archivos
        self.assertIn('text', report_files)
        self.assertIn('html', report_files)
        self.assertIn('json', report_files)
        
        for file_path in report_files.values():
            self.assertTrue(os.path.exists(file_path))

if __name__ == '__main__':
    unittest.main()
