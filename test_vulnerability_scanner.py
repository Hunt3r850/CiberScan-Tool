#!/usr/bin/env python3
"""
Script de prueba para el módulo de análisis de vulnerabilidades.

Este script demuestra el uso del módulo de análisis de vulnerabilidades
para detectar vulnerabilidades en sistemas escaneados.
"""

import os
import sys
import logging
import argparse
import json

# Añadir el directorio raíz al path para importar los módulos
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from modules.vulnerability_scanner import VulnerabilityScanner, CVEDatabase, VulnerabilityReporter
from modules.network_scanner import Host, Port, Service

def main():
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger("VulnerabilityTest")
    
    # Parsear argumentos
    parser = argparse.ArgumentParser(description='Herramienta de análisis de vulnerabilidades')
    parser.add_argument('--input', help='Archivo JSON con resultados de escaneo de red')
    parser.add_argument('--output', default='./output', help='Directorio de salida')
    parser.add_argument('--vulners-key', help='API key para Vulners')
    args = parser.parse_args()
    
    # Crear directorio de salida si no existe
    if not os.path.exists(args.output):
        os.makedirs(args.output)
    
    # Inicializar escáner de vulnerabilidades
    logger.info("Inicializando escáner de vulnerabilidades")
    cve_db = CVEDatabase()
    scanner = VulnerabilityScanner(cve_db)
    
    # Configurar API key si se proporciona
    if args.vulners_key:
        scanner.set_api_key('vulners', args.vulners_key)
    
    # Cargar hosts desde archivo o crear datos de prueba
    hosts = []
    if args.input and os.path.exists(args.input):
        logger.info(f"Cargando hosts desde {args.input}")
        try:
            with open(args.input, 'r') as f:
                data = json.load(f)
                
            # Procesar datos según el formato del archivo
            # Este código asume un formato específico, ajustar según sea necesario
            for host_data in data:
                host = Host(
                    host_data['ip_address'],
                    host_data.get('hostname'),
                    host_data.get('status', 'unknown')
                )
                
                # Cargar puertos
                for port_data in host_data.get('ports', []):
                    port = Port(
                        port_data['number'],
                        port_data.get('protocol', 'tcp'),
                        port_data.get('state', 'unknown')
                    )
                    
                    # Cargar servicio si existe
                    if port_data.get('service'):
                        service_data = port_data['service']
                        service = Service(
                            service_data.get('name', 'unknown'),
                            service_data.get('product'),
                            service_data.get('version')
                        )
                        
                        # Cargar información extra
                        for key, value in service_data.get('extra_info', {}).items():
                            service.add_info(key, value)
                            
                        port.set_service(service)
                        
                    host.add_port(port)
                
                hosts.append(host)
                
        except Exception as e:
            logger.error(f"Error al cargar hosts: {str(e)}")
            # Continuar con datos de prueba
            hosts = []
    
    # Si no hay hosts cargados, crear datos de prueba
    if not hosts:
        logger.info("Creando datos de prueba")
        
        # Host 1: Servidor web
        host1 = Host('192.168.1.10', 'webserver', 'up')
        
        port1 = Port(80, 'tcp', 'open')
        service1 = Service('http', 'Apache', '2.4.41')
        port1.set_service(service1)
        host1.add_port(port1)
        
        port2 = Port(443, 'tcp', 'open')
        service2 = Service('https', 'Apache', '2.4.41')
        port2.set_service(service2)
        host1.add_port(port2)
        
        port3 = Port(22, 'tcp', 'open')
        service3 = Service('ssh', 'OpenSSH', '7.6p1')
        port3.set_service(service3)
        host1.add_port(port3)
        
        # Host 2: Base de datos
        host2 = Host('192.168.1.20', 'dbserver', 'up')
        
        port4 = Port(3306, 'tcp', 'open')
        service4 = Service('mysql', 'MySQL', '5.7.30')
        port4.set_service(service4)
        host2.add_port(port4)
        
        port5 = Port(22, 'tcp', 'open')
        service5 = Service('ssh', 'OpenSSH', '7.6p1')
        port5.set_service(service5)
        host2.add_port(port5)
        
        hosts = [host1, host2]
    
    # Convertir lista de hosts a diccionario para el escáner
    hosts_dict = {host.ip_address: host for host in hosts}
    
    # Realizar escaneo de vulnerabilidades
    logger.info(f"Escaneando {len(hosts)} hosts en busca de vulnerabilidades")
    scan_methods = ['cve_db']  # Usar solo la base de datos local para pruebas
    if 'vulners' in scanner.api_keys:
        scan_methods.append('vulners')
    
    results = scanner.scan_network(hosts, methods=scan_methods)
    
    # Guardar resultados
    results_file = os.path.join(args.output, 'vulnerability_results.json')
    scanner.save_results(results, results_file)
    logger.info(f"Resultados guardados en {results_file}")
    
    # Generar informes
    logger.info("Generando informes")
    reporter = VulnerabilityReporter(output_dir=args.output)
    report_files = reporter.generate_complete_report(results, hosts_dict)
    
    # Mostrar resumen
    total_vulns = sum(len(vulns) for vulns in results.values())
    logger.info(f"Escaneo completado. Se encontraron {total_vulns} vulnerabilidades en {len(results)} hosts.")
    
    # Mostrar archivos generados
    logger.info("Informes generados:")
    for format_name, file_path in report_files.items():
        logger.info(f"- {format_name}: {file_path}")

if __name__ == "__main__":
    main()
