#!/usr/bin/env python3
"""
Script de prueba para el módulo de análisis de vulnerabilidades web.

Este script demuestra el uso del módulo de análisis de vulnerabilidades web
para detectar problemas de seguridad en aplicaciones web.
"""

import os
import sys
import logging
import argparse
import json

# Añadir el directorio raíz al path para importar los módulos
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from modules.web_vulnerability_scanner import WebVulnerabilityScanner, WebVulnerabilityReporter

def main():
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger("WebVulnerabilityTest")
    
    # Parsear argumentos
    parser = argparse.ArgumentParser(description='Herramienta de análisis de vulnerabilidades web')
    parser.add_argument('--url', required=True, help='URL del sitio web a analizar')
    parser.add_argument('--crawl-depth', type=int, default=1, help='Profundidad de rastreo')
    parser.add_argument('--max-urls', type=int, default=10, help='Número máximo de URLs a analizar')
    parser.add_argument('--scan-types', help='Tipos de escaneo separados por comas (xss,sqli,open_redirect,header_injection)')
    parser.add_argument('--output', default='./output', help='Directorio de salida')
    parser.add_argument('--delay', type=float, default=0.5, help='Retraso entre peticiones en segundos')
    parser.add_argument('--timeout', type=int, default=10, help='Timeout para peticiones en segundos')
    parser.add_argument('--user-agent', default=None, help='User-Agent personalizado')
    parser.add_argument('--use-nikto', action='store_true', help='Utilizar Nikto para el escaneo')
    parser.add_argument('--nikto-path', default='nikto', help='Ruta al ejecutable de Nikto')
    args = parser.parse_args()
    
    # Crear directorio de salida si no existe
    if not os.path.exists(args.output):
        os.makedirs(args.output)
    
    # Inicializar escáner de vulnerabilidades web
    logger.info("Inicializando escáner de vulnerabilidades web")
    scanner = WebVulnerabilityScanner()
    
    # Configurar escáner
    scanner.set_delay(args.delay)
    scanner.set_timeout(args.timeout)
    if args.user_agent:
        scanner.set_user_agent(args.user_agent)
    
    # Registrar integración con Nikto si se solicita
    if args.use_nikto:
        try:
            from modules.web_vulnerability_scanner.integrations import NiktoScanner
            nikto = NiktoScanner(nikto_path=args.nikto_path)
            if nikto.check_installation():
                scanner.register_integration("nikto", nikto)
                logger.info("Integración con Nikto registrada correctamente")
            else:
                logger.warning("No se pudo registrar la integración con Nikto: no está instalado o no es accesible")
        except ImportError:
            logger.error("No se pudo importar el módulo de integración con Nikto")
    
    # Preparar tipos de escaneo
    scan_types = None
    if args.scan_types:
        scan_types = args.scan_types.split(',')
    
    # Realizar escaneo
    logger.info(f"Iniciando escaneo de {args.url} con profundidad {args.crawl_depth}")
    results = scanner.scan_site(
        base_url=args.url,
        crawl_depth=args.crawl_depth,
        max_urls=args.max_urls,
        scan_types=scan_types
    )
    
    # Guardar resultados
    results_file = os.path.join(args.output, 'web_vulnerability_results.json')
    scanner.save_results(results, results_file)
    logger.info(f"Resultados guardados en {results_file}")
    
    # Generar informes
    logger.info("Generando informes")
    reporter = WebVulnerabilityReporter(output_dir=args.output)
    report_files = reporter.generate_complete_report(results)
    
    # Mostrar resumen
    total_vulns = sum(len(vulns) for vulns in results.values())
    high_risk = sum(1 for vulns in results.values() for vuln in vulns if vuln.risk_level == "High")
    medium_risk = sum(1 for vulns in results.values() for vuln in vulns if vuln.risk_level == "Medium")
    low_risk = sum(1 for vulns in results.values() for vuln in vulns if vuln.risk_level == "Low")
    info_risk = sum(1 for vulns in results.values() for vuln in vulns if vuln.risk_level == "Info")
    
    logger.info(f"Escaneo completado. Se encontraron {total_vulns} vulnerabilidades:")
    logger.info(f"- Alto riesgo: {high_risk}")
    logger.info(f"- Riesgo medio: {medium_risk}")
    logger.info(f"- Bajo riesgo: {low_risk}")
    logger.info(f"- Informativo: {info_risk}")
    
    # Mostrar archivos generados
    logger.info("Informes generados:")
    for format_name, file_path in report_files.items():
        logger.info(f"- {format_name}: {file_path}")
    
    # Mostrar vulnerabilidades de alto riesgo
    if high_risk > 0:
        logger.info("\nVulnerabilidades de alto riesgo:")
        for url, vulns in results.items():
            for vuln in vulns:
                if vuln.risk_level == "High":
                    logger.info(f"- {vuln.name} en {url}")

if __name__ == "__main__":
    main()
